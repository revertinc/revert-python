# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Account(pydantic.BaseModel):
    id: str
    tenant_count: int
    private_token: str
    public_token: str
    domain: str
    skip_waitlist: bool = pydantic.Field(alias="skipWaitlist")
    users: typing.Optional[typing.List[RevertUser]]
    apps: typing.Optional[typing.List[App]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}


from .app import App  # noqa: E402
from .revert_user import RevertUser  # noqa: E402

Account.update_forward_refs()
