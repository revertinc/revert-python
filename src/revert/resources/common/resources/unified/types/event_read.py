# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class EventRead(pydantic.BaseModel):
    type: str = pydantic.Field(description="The type of the event in the CRM.")
    subject: str = pydantic.Field(description="The Subject of the event/meeting in the CRM.")
    start_date_time: str = pydantic.Field(alias="startDateTime", description="Event start date time.")
    end_date_time: str = pydantic.Field(alias="endDateTime", description="Event end date time.")
    is_all_day_event: bool = pydantic.Field(
        alias="isAllDayEvent", description="Is `true` if the event is an all day event."
    )
    description: str = pydantic.Field(description="Description of the event/meeting.")
    location: str = pydantic.Field(description="The location of the event/meeting.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
