# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class CommonUnifiedFields(pydantic.BaseModel):
    id: str = pydantic.Field(description="The unique `id` of this object in Revert")
    remote_id: str = pydantic.Field(
        alias="remoteId", description="The unique `id` of this object in the downstream CRM."
    )
    created_timestamp: typing.Any = pydantic.Field(
        alias="createdTimestamp", description="Creation timestamp of the object."
    )
    updated_timestamp: typing.Any = pydantic.Field(
        alias="updatedTimestamp", description="The last updated timestamp of the object."
    )
    additional: typing.Optional[typing.Any] = pydantic.Field(
        description="Any fields that are not unified yet/non-unifiable come inside this `json` object."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
