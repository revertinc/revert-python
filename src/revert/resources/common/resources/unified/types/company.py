# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ......core.datetime_utils import serialize_datetime
from .common_unified_fields import CommonUnifiedFields
from .company_address import CompanyAddress

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Company(CommonUnifiedFields):
    name: str = pydantic.Field(description="Name of the company in a CRM.")
    industry: str = pydantic.Field(description="Industry associated with this company. (not supported by pipedrive)")
    description: str = pydantic.Field(description="Description of the company. (not supported by pipedrive)")
    annual_revenue: int = pydantic.Field(
        alias="annualRevenue", description="Annual revenue of the company. (not supported by pipedrive)"
    )
    size: int = pydantic.Field(description="Number of employees or size of the company.")
    phone: str = pydantic.Field(description="Phone number of the company. (not supported by pipedrive)")
    address: CompanyAddress = pydantic.Field(description="Company address.")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
