# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ..common.resources.errors.errors.internal_server_error import InternalServerError
from ..common.resources.errors.errors.not_found_error import NotFoundError
from ..common.resources.errors.errors.un_authorized_error import UnAuthorizedError
from ..common.resources.errors.types.base_error import BaseError
from .types.create_account_field_mapping_request_body import CreateAccountFieldMappingRequestBody
from .types.create_account_field_mapping_response import CreateAccountFieldMappingResponse
from .types.create_field_mapping_request_body import CreateFieldMappingRequestBody
from .types.create_field_mapping_response import CreateFieldMappingResponse
from .types.delete_account_field_mapping_config_response import DeleteAccountFieldMappingConfigResponse
from .types.delete_field_mapping_response import DeleteFieldMappingResponse
from .types.get_field_mapping_config_response import GetFieldMappingConfigResponse
from .types.get_field_mappings_response import GetFieldMappingsResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class FieldMappingClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_field_mapping_config(
        self, *, x_revert_public_token: str, x_revert_t_id: str, x_revert_t_token: str
    ) -> GetFieldMappingConfigResponse:
        """
        Get field mappings configs for a connection

        Parameters:
            - x_revert_public_token: str. Your public key, to be used on the frontend usually.

            - x_revert_t_id: str. The unique customer id used when the customer linked their account.

            - x_revert_t_token: str. The temp used to identify tenant.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-revert-public-token": x_revert_public_token,
                    "x-revert-t-id": x_revert_t_id,
                    "x-revert-t-token": x_revert_t_token,
                }
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFieldMappingConfigResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_field_mappings(self, *, x_revert_api_token: str, x_revert_t_id: str) -> GetFieldMappingsResponse:
        """
        Get field mappings for a connection

        Parameters:
            - x_revert_api_token: str. Your official API key for accessing revert apis.

            - x_revert_t_id: str. The unique customer id used when the customer linked their account.
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping/mappings"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-revert-api-token": x_revert_api_token,
                    "x-revert-t-id": x_revert_t_id,
                }
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFieldMappingsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_field_mapping(
        self,
        *,
        request: CreateFieldMappingRequestBody,
        x_revert_public_token: str,
        x_revert_t_id: str,
        x_revert_t_token: str,
    ) -> CreateFieldMappingResponse:
        """
        Create field mappings for a connection after user input

        Parameters:
            - request: CreateFieldMappingRequestBody.

            - x_revert_public_token: str. Your public key, to be used on the frontend usually.

            - x_revert_t_id: str. The unique customer id used when the customer linked their account.

            - x_revert_t_token: str. The temp used to identify tenant.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping"),
            json=jsonable_encoder(request),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-revert-public-token": x_revert_public_token,
                    "x-revert-t-id": x_revert_t_id,
                    "x-revert-t-token": x_revert_t_token,
                }
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateFieldMappingResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_field_mapping(self, *, x_revert_api_token: str, x_revert_t_id: str) -> DeleteFieldMappingResponse:
        """
        Delete field mappings for a connection

        Parameters:
            - x_revert_api_token: str. Your official API key for accessing revert apis.

            - x_revert_t_id: str. The unique customer id used when the customer linked their account.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-revert-api-token": x_revert_api_token,
                    "x-revert-t-id": x_revert_t_id,
                }
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteFieldMappingResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_account_field_mapping_config(
        self, *, request: CreateAccountFieldMappingRequestBody, x_revert_api_token: str
    ) -> CreateAccountFieldMappingResponse:
        """
        Create field mappings config for an account

        Parameters:
            - request: CreateAccountFieldMappingRequestBody.

            - x_revert_api_token: str. Your official API key for accessing revert apis.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping/config"),
            json=jsonable_encoder(request),
            headers=remove_none_from_dict(
                {**self._client_wrapper.get_headers(), "x-revert-api-token": x_revert_api_token}
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAccountFieldMappingResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_account_field_mapping_config(
        self, *, x_revert_api_token: str
    ) -> DeleteAccountFieldMappingConfigResponse:
        """
        Delete field mappings config for an account

        Parameters:
            - x_revert_api_token: str. Your official API key for accessing revert apis.
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping/config"),
            headers=remove_none_from_dict(
                {**self._client_wrapper.get_headers(), "x-revert-api-token": x_revert_api_token}
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteAccountFieldMappingConfigResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncFieldMappingClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_field_mapping_config(
        self, *, x_revert_public_token: str, x_revert_t_id: str, x_revert_t_token: str
    ) -> GetFieldMappingConfigResponse:
        """
        Get field mappings configs for a connection

        Parameters:
            - x_revert_public_token: str. Your public key, to be used on the frontend usually.

            - x_revert_t_id: str. The unique customer id used when the customer linked their account.

            - x_revert_t_token: str. The temp used to identify tenant.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-revert-public-token": x_revert_public_token,
                    "x-revert-t-id": x_revert_t_id,
                    "x-revert-t-token": x_revert_t_token,
                }
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFieldMappingConfigResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_field_mappings(self, *, x_revert_api_token: str, x_revert_t_id: str) -> GetFieldMappingsResponse:
        """
        Get field mappings for a connection

        Parameters:
            - x_revert_api_token: str. Your official API key for accessing revert apis.

            - x_revert_t_id: str. The unique customer id used when the customer linked their account.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping/mappings"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-revert-api-token": x_revert_api_token,
                    "x-revert-t-id": x_revert_t_id,
                }
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(GetFieldMappingsResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_field_mapping(
        self,
        *,
        request: CreateFieldMappingRequestBody,
        x_revert_public_token: str,
        x_revert_t_id: str,
        x_revert_t_token: str,
    ) -> CreateFieldMappingResponse:
        """
        Create field mappings for a connection after user input

        Parameters:
            - request: CreateFieldMappingRequestBody.

            - x_revert_public_token: str. Your public key, to be used on the frontend usually.

            - x_revert_t_id: str. The unique customer id used when the customer linked their account.

            - x_revert_t_token: str. The temp used to identify tenant.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping"),
            json=jsonable_encoder(request),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-revert-public-token": x_revert_public_token,
                    "x-revert-t-id": x_revert_t_id,
                    "x-revert-t-token": x_revert_t_token,
                }
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateFieldMappingResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_field_mapping(self, *, x_revert_api_token: str, x_revert_t_id: str) -> DeleteFieldMappingResponse:
        """
        Delete field mappings for a connection

        Parameters:
            - x_revert_api_token: str. Your official API key for accessing revert apis.

            - x_revert_t_id: str. The unique customer id used when the customer linked their account.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping"),
            headers=remove_none_from_dict(
                {
                    **self._client_wrapper.get_headers(),
                    "x-revert-api-token": x_revert_api_token,
                    "x-revert-t-id": x_revert_t_id,
                }
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteFieldMappingResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_account_field_mapping_config(
        self, *, request: CreateAccountFieldMappingRequestBody, x_revert_api_token: str
    ) -> CreateAccountFieldMappingResponse:
        """
        Create field mappings config for an account

        Parameters:
            - request: CreateAccountFieldMappingRequestBody.

            - x_revert_api_token: str. Your official API key for accessing revert apis.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping/config"),
            json=jsonable_encoder(request),
            headers=remove_none_from_dict(
                {**self._client_wrapper.get_headers(), "x-revert-api-token": x_revert_api_token}
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(CreateAccountFieldMappingResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_account_field_mapping_config(
        self, *, x_revert_api_token: str
    ) -> DeleteAccountFieldMappingConfigResponse:
        """
        Delete field mappings config for an account

        Parameters:
            - x_revert_api_token: str. Your official API key for accessing revert apis.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "field-mapping/config"),
            headers=remove_none_from_dict(
                {**self._client_wrapper.get_headers(), "x-revert-api-token": x_revert_api_token}
            ),
            timeout=None,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DeleteAccountFieldMappingConfigResponse, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnAuthorizedError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        if _response.status_code == 404:
            raise NotFoundError(pydantic.parse_obj_as(BaseError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
